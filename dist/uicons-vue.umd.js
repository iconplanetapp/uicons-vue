(function(n,c){typeof exports=="object"&&typeof module<"u"?module.exports=c(require("vue")):typeof define=="function"&&define.amd?define(["vue"],c):(n=typeof globalThis<"u"?globalThis:n||self,n["uicons-vue"]=c(n.Vue))})(this,function(n){"use strict";const c=(o,t)=>{const e=o.__vccOpts||o;for(const[i,s]of t)e[i]=s;return e},r={data(){return{pack:""}},props:{package:{type:String,required:!0},name:{type:String,required:!0}},mounted(){this.pack=this.package}};function a(o,t,e,i,s,l){return n.openBlock(),n.createElementBlock("i",{class:n.normalizeClass(`ip-${s.pack}-${e.name}`)},null,2)}const p=c(r,[["render",a]]);class u{constructor(t,e){this.message=t,this.name=e}}return{install(o,t){try{let e="iconplanet-uicon";if(t.componentName)if(typeof t.componentName=="string")e=t.componentName;else throw new u('"componentName" must be a string.',"Invalid config value");o.component(e,p)}catch(e){console.warn(`[@iconplanet/uicons-vue]: ${e.message}`)}}}});
